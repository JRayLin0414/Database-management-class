<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="965"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="cast_and_directors" custom_title="0" dock_id="1" table="4,18:maincast_and_directors"/><dock_state state="000000ff00000000fd00000001000000020000036e00000345fc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000036e0000016900ffffff0000036e0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="movie" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="52"/><column index="2" value="300"/><column index="3" value="51"/><column index="4" value="63"/><column index="5" value="144"/><column index="6" value="97"/><column index="7" value="88"/><column index="8" value="300"/><column index="9" value="75"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- SQL 1
SELECT m.name, m.year, m.box_office
FROM movies m
WHERE m.year &gt;= 2000 AND m.year &lt;= 2020
ORDER BY m.box_office DESC
LIMIT 5;

-- SQL 2
SELECT m.name, m.year, m.rating, cd.directors
FROM movies m
JOIN cast_and_directors cd ON m.rank = cd.rank
WHERE cd.directors LIKE '%Christopher Nolan%'
AND m.rating &gt;= 8.0
ORDER BY m.rating DESC;

-- SQL 3
SELECT m.name, m.year, m.box_office, 
       (m.box_office * (SELECT c2.&quot;Annual Average CPI(-U)&quot; 
                        FROM cpi c2 
                        WHERE c2.year = 2024) / c.&quot;Annual Average CPI(-U)&quot;) AS adjusted_box_office
FROM movies m
JOIN cpi c ON m.year = c.year
WHERE m.box_office IS NOT NULL
ORDER BY adjusted_box_office DESC
LIMIT 10;

-- SQL 4
SELECT m.genre, 
       COUNT(*) AS movie_count, 
       ROUND(AVG(m.rating), 2) AS average_rating
FROM movies m
WHERE m.genre LIKE '%Action%'
GROUP BY m.genre
HAVING movie_count &gt;= 1
ORDER BY average_rating DESC
LIMIT 5;

-- SQL 5
SELECT m.name, m.year, m.budget, m.box_office,
       ROUND((m.box_office / m.budget), 2) AS return_on_investment
FROM movies m
WHERE m.budget &gt; 0 AND m.box_office IS NOT NULL
ORDER BY return_on_investment DESC
LIMIT 10;</sql><current_tab id="0"/></tab_sql></sqlb_project>
